// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NBAapi.Data;

namespace NBAapi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210309194446_Added Badges")]
    partial class AddedBadges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("NBAapi.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalPointsBalance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsEarned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPointsSpent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("NBAapi.Models.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BadgeImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("BadgeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("BadgeType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("NBAapi.Models.BadgesEarned", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("BadgesEarned");
                });

            modelBuilder.Entity("NBAapi.Models.Badge", b =>
                {
                    b.HasOne("NBAapi.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NBAapi.Models.BadgesEarned", b =>
                {
                    b.HasOne("NBAapi.Models.Account", "Account")
                        .WithMany("BadgesEarned")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("NBAapi.Models.Account", b =>
                {
                    b.Navigation("BadgesEarned");
                });
#pragma warning restore 612, 618
        }
    }
}
